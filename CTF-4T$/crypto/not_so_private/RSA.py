e = 65537
c = 19949070990331976245949375301773799373206800804362632168364316553540430616830618653790469820828363016574115997704094863829732182137092831141159044101049172034884217341208278135632024598752036879352726375804431415940381410379858267677290511438684691665260067686568252722840144131544524130614320199820713749708063642505970041091970221332182634285081892576008284361856437472575724015987128320812953565466004548726671456646020677256311338766802480861734450302201585275812208617677229147872618475814224684268204020352159322992065216537963716573003898076957096748095052514990199352
n = 24184405921426813952257404599844172064081900441874911388193652630310202789495631574938639097579036296101853234084915009375105829951961044132903535773924370570635332237832028283789889280165403481654234745557486403470274088268474644426048449169536944543970537467352336781804911800773427862282122961246703917704568734038884635778376198127691642199423912956685671445503565723497448770592525438558805325647407374824270703532081624469904632124745208505061145540656760946859657371270888296303072821867249045709759196878699068410554299707085233635566878012647656106156406503857113207
# primes are factored from n
primes = [
    9308809837340399653, 9638656009474996247, 10172067034866822329, 10354784369698224719,
    11209486700740045189, 11346323158137382339, 11354147304116634911, 11764352138541927941,
    12173970345611589103, 13161288593188783501, 13232429251966529279, 13688640699874074247,
    14198816595521136841, 14476726661472037681, 14731435635793702433, 14861104142259777419,
    15169799324952462451, 15238470019725544583, 15415799843802438209, 15511003127367003967,
    15745096712251841113, 15878969227403060279, 16576514605788751547, 16630719954639992581,
    16671653695109508187, 16728097962753531677, 17996055586202421529, 18063314945654761219,
    18185405107246550969, 18362837959013960089
]

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

ts = []
xs = []
ds = []

for i in range(len(primes)):
	ds.append(modinv(e, primes[i]-1))

m = primes[0]

for i in range(1, len(primes)):
	ts.append(modinv(m, primes[i]))
	m = m * primes[i]

for i in range(len(primes)):
	xs.append(pow((c%primes[i]), ds[i], primes[i]))

x = xs[0]
m = primes[0]

for i in range(1, len(primes)):
	x = x + m * ((xs[i] - x % primes[i]) * (ts[i-1] % primes[i]))
	m = m * primes[i]


print hex(x%n)[2:-1].decode("hex")